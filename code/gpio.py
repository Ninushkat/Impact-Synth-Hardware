""" ~ Neurorack project ~ GPIO : An example tutorial class for testing simple GPIO interactions  This file is only a pedagogical draft for development. This allows to understand the basic principles of the GPIO in general. Here the functions are targeted to check the Jetson Nano specifically. Author               : Philippe Esling, Ninon Devis, Martin Vert                        <{esling, devis}@ircam.fr>"""import timeimport Jetson.GPIO as GPIOclass GPIOTutorial():        '''        The class implements different tutorials to understand the GPIO.         It should work with any GPIO (Raspberry Pi), but here we target the Jetson Nano    '''        def __init__(self,             pins: list=[11],             debounce: int=250):        '''            Constructor - Creates a new instance of the Navigation class.            Parameters:                pins:       [int], optional                            Specify GPIO pins that connect buttons [default: 11]                debounce:   [int], optional                            Debounce time to prevent multiple firings [default: 250ms]        '''        self._pins = pins        self._debounce = debounce                                         self.setup_gpios()        def setup_gpios(self):        GPIO.setwarnings(False)                                             GPIO.setmode(GPIO.BOARD)             def tuto_01_led(self, channel: int):        for pin in self.pins:            GPIO.setup(pin, GPIO.IN)                GPIO.add_event_detect(pin, GPIO.RISING, callback=self.callback, bouncetime=self._debounce)            GPIO.add_event_detect(pin, GPIO.FALLING, callback=self.callback_fall, bouncetime=self._debounce)        print("Button event - pushed")        value = GPIO.input(channel)        print(value)        time.sleep(1)            def tuto_02_button(self, channel: int):        for pin in self.pins:            GPIO.setup(pin, GPIO.IN)                GPIO.add_event_detect(pin, GPIO.RISING, callback=self.callback, bouncetime=self._debounce)            GPIO.add_event_detect(pin, GPIO.FALLING, callback=self.callback_fall, bouncetime=self._debounce)        print("Button event - pushed")        value = GPIO.input(channel)        print(value)        time.sleep(1)        def callback_fall(self, channel: int):        print("Button event - released")        value = GPIO.input(channel)        print(value)        time.sleep(1)    def __del__(self):        '''            Destructor - cleans up the GPIO.        '''        GPIO.cleanup()if __name__ == '__main__':    import argparse    parser = argparse.ArgumentParser(description='GPIO Tutorial')    # Device Information    parser.add_argument('--device',         type=str, default='cuda:2',     help='device cuda or cpu')    # Parse the arguments    args = parser.parse_args()    # Create the tutorial class    tutorial = GPIOTutorial()    tutorial.tuto_01_led()    tutorial.tuto_02_button()    